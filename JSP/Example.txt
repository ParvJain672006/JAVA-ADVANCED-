# JSP Example - Power of 2 Table

##  **Code Example:**

```jsp
<html>
<head>
    <title>Power of 2</title>
</head>
<body>
    <table>
        <tr>
            <th>Number</th>
            <th>Exponent of 2</th>
        </tr>
        <% for (int i = 0; i <= 10; i++) { %>
        <tr>
            <td><%= i %></td>
            <td><%= Math.pow(2, i) %></td>
        </tr>
        <% } %>
    </table>
</body>
</html>
```

**ðŸ’¡ Purpose:** Dynamically generated table â†’ generating elements to the power of 2.

---

## ðŸš€ **Running a JSP Page:**

### **Step-by-Step Process:**

**a)** Save your code as `.jsp` file  
**b)** Place it in the server's web application directory  
**c)** Start your JSP-enabled server  
**d)** Access the page using: `http://localhost:port/yourapp/hello.jsp`

---

## ðŸ”„ **JSP Lifecycle Diagram:**

### **Phase-by-Phase Breakdown:**

**a) Translation Phase**  
   - JSP file â†’ Java servlet source code

**b) Compilation Phase**  
   - Servlet source â†’ Servlet bytecode (.class file)

**c) Class Loading Phase**  
   - Servlet class loaded by container

**d) Initialization Phase**  
   - `jspInit()` method called once

**e) Request Handling Phase**  
   - `jspService()` method called per request

**f) Destruction Phase**  
   - `jspDestroy()` method called once when servlet is destroyed

  >>> app servlet       - controller logic  - hhandle request calls  JDBC , forward to JSP 
  >>> JSP                - view /present  - dsiplay data , minimal or no business  is logic 
  >>> JDBC              - DB connectivity  - API's for data base operation used y servlets


  *jsp are mainly for display  
  * servlets handles business logic 
  * JDBC is never used directly  by JSP - IT is always  the service 
                    > this sepreation ensures clean  , maintanaince , modular , web application in java 




                    # JSP elements & Style 

A.) Expression - output value to page  ->     < % = expression = % >

B.) Scriptlet  - insert java code block ->   < % java code % >

c.) declaration - declare variable / methods ->  < % ! type name : % > or < % ! method (){...} % >


D.) directive  - SPecial instruction  ->  <% @ directive attribute  = " value " % 

Example 

A.) hello ! the home is now < % = new java.util.date()% >

B.) <% String name = "green" ;
SOPln("hello" , + name );
%>

c .) <% date theDATE = newDATE();
DATE  getDATE (){
   retur theDATE;
} %>


 HELLO ! the time is now < %= getDATE () % >


 D.) imports the java pacakage 

     > % @ page import = " java.util.* %">

         > males java.util classes available in jsp.
